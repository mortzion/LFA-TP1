/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Panels;

import Automato.Entidade;
import Automato.Estado;
import Automato.Label;
import Automato.LabelDialog;
import Automato.Transicao.Transicao;
import Automato.Transicao.TransicaoArco;
import Automato.Transicao.TransicaoAuto;
import Automato.Transicao.TransicaoReta;
import Automato.Transicao1;
import Automato.TransicaoDialog;
import Core.AutomatoFinito;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Stack;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

/**
 *
 * @author mortz
 */
public class Automato extends javax.swing.JPanel {

    
    private ViewPanel view;
    private int x,y;
    private AutomatoFinito automato = new AutomatoFinito();
    private JFrame pai;
    public Automato(JFrame pai) {
        initComponents();
        this.pai = pai;
        bttnGroupMenu.add(bttnPointer);
        bttnGroupMenu.add(bttnCreateAutomato);
        bttnGroupMenu.add(bttnCreateTransicao);
        bttnGroupMenu.add(bttnApagar);
        this.bttnPointer.setSelected(true);
        view = (ViewPanel)this.jPanel1;
        
        //scrollPaneImage.add(view);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bttnGroupMenu = new javax.swing.ButtonGroup();
        menuEstado = new javax.swing.JPopupMenu();
        itemMenuFinal = new javax.swing.JMenuItem();
        itemMenuInicial = new javax.swing.JMenuItem();
        itemMenuRemoverEstado = new javax.swing.JMenuItem();
        itenMenuAddLabel = new javax.swing.JMenuItem();
        menuSolto = new javax.swing.JPopupMenu();
        itemMenuCriarLabel = new javax.swing.JMenuItem();
        menuLabel = new javax.swing.JPopupMenu();
        itemMenuEditarLabel = new javax.swing.JMenuItem();
        scrollPaneImage = new javax.swing.JScrollPane();
        jPanel1 = new ViewPanel();
        jToolBar1 = new javax.swing.JToolBar();
        bttnPointer = new javax.swing.JToggleButton();
        bttnCreateAutomato = new javax.swing.JToggleButton();
        bttnCreateTransicao = new javax.swing.JToggleButton();
        bttnApagar = new javax.swing.JToggleButton();
        jToolBar2 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        menuEstado.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
                menuEstadoPopupMenuCanceled(evt);
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        itemMenuFinal.setText("Final");
        itemMenuFinal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuFinalActionPerformed(evt);
            }
        });
        menuEstado.add(itemMenuFinal);

        itemMenuInicial.setText("Inicial");
        itemMenuInicial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuInicialActionPerformed(evt);
            }
        });
        menuEstado.add(itemMenuInicial);

        itemMenuRemoverEstado.setText("Remover Estado");
        itemMenuRemoverEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuRemoverEstadoActionPerformed(evt);
            }
        });
        menuEstado.add(itemMenuRemoverEstado);

        itenMenuAddLabel.setText("Adcionar/Editar Label");
        itenMenuAddLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itenMenuAddLabelActionPerformed(evt);
            }
        });
        menuEstado.add(itenMenuAddLabel);

        menuSolto.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
                menuSoltoPopupMenuCanceled(evt);
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        itemMenuCriarLabel.setText("Criar Label");
        itemMenuCriarLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuCriarLabelActionPerformed(evt);
            }
        });
        menuSolto.add(itemMenuCriarLabel);

        itemMenuEditarLabel.setText("Editar Label");
        itemMenuEditarLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuEditarLabelActionPerformed(evt);
            }
        });
        menuLabel.add(itemMenuEditarLabel);

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        scrollPaneImage.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                scrollPaneImageMouseDragged(evt);
            }
        });
        scrollPaneImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                scrollPaneImageMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                scrollPaneImageMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                scrollPaneImageMouseReleased(evt);
            }
        });
        scrollPaneImage.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                scrollPaneImageComponentResized(evt);
            }
        });

        jPanel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel1scrollPaneImageMouseDragged(evt);
            }
        });
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1scrollPaneImageMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel1scrollPaneImageMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jPanel1scrollPaneImageMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 536, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 403, Short.MAX_VALUE)
        );

        scrollPaneImage.setViewportView(jPanel1);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        bttnPointer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/cursor (1).png"))); // NOI18N
        bttnPointer.setToolTipText("Ponteiro");
        bttnPointer.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bttnPointer.setFocusable(false);
        bttnPointer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnPointer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(bttnPointer);

        bttnCreateAutomato.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/circle-shape-outline.png"))); // NOI18N
        bttnCreateAutomato.setToolTipText("Criar Novo Estado");
        bttnCreateAutomato.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bttnCreateAutomato.setFocusable(false);
        bttnCreateAutomato.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnCreateAutomato.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bttnCreateAutomato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnCreateAutomatoActionPerformed(evt);
            }
        });
        jToolBar1.add(bttnCreateAutomato);

        bttnCreateTransicao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/right-arrow.png"))); // NOI18N
        bttnCreateTransicao.setToolTipText("Criar Transição");
        bttnCreateTransicao.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bttnCreateTransicao.setFocusable(false);
        bttnCreateTransicao.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnCreateTransicao.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(bttnCreateTransicao);

        bttnApagar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/cross-remove-sign.png"))); // NOI18N
        bttnApagar.setToolTipText("Apagar");
        bttnApagar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bttnApagar.setFocusable(false);
        bttnApagar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bttnApagar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(bttnApagar);

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);

        jButton1.setText("Teste Rápido");
        jButton1.setToolTipText("Teste Rápido");
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar2.add(jButton1);

        jButton2.setText("Testar Estado por Estado");
        jButton2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar2.add(jButton2);

        jButton3.setText("Testar Múltiplas Entradas");
        jButton3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar2.add(jButton3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrollPaneImage, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                    .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPaneImage, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel1scrollPaneImageMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1scrollPaneImageMouseDragged
        if(bttnCreateTransicao.isSelected() == true){
            view.transTarget.setLocation(evt.getPoint());
        }
        if(bttnCreateAutomato.isSelected() == true || bttnPointer.isSelected() == true){
            if(view.entidadeSelecionada != null){
                view.updatePosSelecionado(evt.getPoint(),scrollPaneImage);
            }
//            if(view.estadoSelecionado != null){
//                view.updatePosSelecionado(evt.getPoint(),scrollPaneImage);
//            }

        }
        scrollPaneImage.revalidate();
        repintar();

    }//GEN-LAST:event_jPanel1scrollPaneImageMouseDragged

    private void jPanel1scrollPaneImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1scrollPaneImageMouseClicked
        if(evt.getButton() == 3 && bttnPointer.isSelected()){
            view.entidadeSelecionada = view.getEntidadeColidido(evt.getPoint().x,evt.getPoint().y);
            if(view.entidadeSelecionada == null){
                x = evt.getX();
                y = evt.getY();
                menuSolto.show(view,evt.getX(),evt.getY());
            }else{
                if(view.entidadeSelecionada instanceof Estado){
                    menuEstado.show(view,evt.getX(),evt.getY());
                }else{
                    menuLabel.show(view,evt.getX(),evt.getY());
                }
            }
        }
        if(bttnApagar.isSelected() && evt.getButton() == 1){
            view.removerEntidade(evt.getX(), evt.getY());
            repintar();
        }
        repaint();
        
//       if(evt.getButton() == 3 && bttnPointer.isSelected()){
//            view.estadoSelecionado = view.getEstadoColidido(evt.getPoint().x, evt.getPoint().y);
//            if(view.estadoSelecionado != null){
//                menuEstado.show(view,evt.getX(), evt.getY());
//            }else{
//                view.labelSelecionada = view.getLabelColidida(evt.getPoint().x,evt.getPoint().y);
//                if(view.labelSelecionada != null){
//                    menuLabel.show(view,evt.getX(),evt.getY());
//                }else{
//                    x = evt.getX();
//                    y = evt.getY();
//                    menuSolto.show(view,evt.getX(),evt.getY());
//                }
//            }
//        }
//       if(bttnApagar.isSelected() && evt.getButton() == 1){
//           view.removerEntidade(evt.getX(), evt.getY());
//           repintar();
//       }
    }//GEN-LAST:event_jPanel1scrollPaneImageMouseClicked

    private void jPanel1scrollPaneImageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1scrollPaneImageMousePressed
        if(evt.getButton() == 1){
            if(bttnCreateTransicao.isSelected()){
                if(view.getEstadoColidido(evt.getX(), evt.getY()) != null){
                    view.creatingTrans = true;
                    view.transSource.setLocation(evt.getPoint());
                    view.transTarget.setLocation(view.transSource);
                }
            }
            if(bttnPointer.isSelected() == true){
                view.entidadeSelecionada = view.getEntidadeColidido(evt.getX(),evt.getY());
                if(view.entidadeSelecionada != null)view.entidadeSelecionada.setSelecionado(true);
                //view.estadoSelecionado = view.getEstadoColidido(evt.getX(), evt.getY());
                //if(view.estadoSelecionado != null){
                //    view.estadoSelecionado.setSelected(true);
                //}
            }
            if(bttnCreateAutomato.isSelected() == true){
                view.entidadeSelecionada = new Estado(evt.getX(),evt.getY());
                view.entidadeSelecionada.setSelecionado(true);
                view.estados.add((Estado)view.entidadeSelecionada);
       
            }
        }else{

        }
        repintar();

    }//GEN-LAST:event_jPanel1scrollPaneImageMousePressed

    private void jPanel1scrollPaneImageMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1scrollPaneImageMouseReleased
        if(evt.getButton() == 1){
            if(bttnCreateTransicao.isSelected() == true){
                if(view.creatingTrans == true){
                    Estado s,t;
                    s = view.getEstadoColidido(view.transSource.x,view.transSource.y);
                    t = view.getEstadoColidido(view.transTarget.x, view.transTarget.y);

                    if(s != null && t != null){
                        new TransicaoDialog(this,false,evt.getPoint());
                    }
                    view.creatingTrans = false;
                }
            }
            if(bttnCreateAutomato.isSelected() == true || bttnPointer.isSelected()){
                if(view.entidadeSelecionada != null){
                    view.entidadeSelecionada.setSelecionado(false);
                    view.entidadeSelecionada = null;
                }
//                if(view.estadoSelecionado != null){
//                    view.estadoSelecionado.setSelecionado(false);
//                    view.estadoSelecionado = null;
//
//                }
            }
        }
        repintar();

    }//GEN-LAST:event_jPanel1scrollPaneImageMouseReleased

    private void scrollPaneImageMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scrollPaneImageMouseDragged
        if(bttnCreateTransicao.isSelected() == true){
            view.transTarget.setLocation(evt.getPoint());
        }
        if(bttnCreateAutomato.isSelected() == true || bttnPointer.isSelected() == true){
            if(view.estadoSelecionado != null){
                view.updatePosSelecionado(evt.getPoint(),scrollPaneImage);
            }

        }
        scrollPaneImage.revalidate();
        repintar();

    }//GEN-LAST:event_scrollPaneImageMouseDragged

    private void scrollPaneImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scrollPaneImageMouseClicked
        if(evt.getButton() == 3){
            view.estadoSelecionado = view.getEstadoColidido(evt.getPoint().x, evt.getPoint().y);
            if(view.estadoSelecionado != null){
                menuEstado.show(this,evt.getXOnScreen(), evt.getYOnScreen());
            }
        }
    }//GEN-LAST:event_scrollPaneImageMouseClicked

    private void repintar(){
        scrollPaneImage.revalidate(); 
        view.cleanImage();
        view.repaint();
    }
    
    
    private void scrollPaneImageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scrollPaneImageMousePressed
        if(evt.getButton() == 1){
            if(bttnCreateTransicao.isSelected()){
                if(view.getEstadoColidido(evt.getX(), evt.getY()) != null){
                    view.creatingTrans = true;
                    view.transSource.setLocation(evt.getPoint());
                    view.transTarget.setLocation(view.transSource);
                }
            }
            if(bttnPointer.isSelected() == true){
                view.estadoSelecionado = view.getEstadoColidido(evt.getX(), evt.getY());
                if(view.estadoSelecionado != null){
                    view.estadoSelecionado.setSelecionado(true);
                }
            }
            if(bttnCreateAutomato.isSelected() == true){
                view.estadoSelecionado = new Estado(evt.getX(),evt.getY());
                view.estadoSelecionado.setSelecionado(true);
                view.estados.add(view.estadoSelecionado);

            }
        }else{

        }
        repintar();

    }//GEN-LAST:event_scrollPaneImageMousePressed

    private void scrollPaneImageMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scrollPaneImageMouseReleased
        if(evt.getButton() == 1){
            if(bttnCreateTransicao.isSelected() == true){
                if(view.creatingTrans == true){
                    Estado s,t;
                    s = view.getEstadoColidido(view.transSource.x,view.transSource.y);
                    t = view.getEstadoColidido(view.transTarget.x, view.transTarget.y);

                    if(s != null && t != null){
                        new TransicaoDialog(this,false,evt.getPoint());
                    }
                    view.creatingTrans = false;
                }
            }
            if(bttnCreateAutomato.isSelected() == true || bttnPointer.isSelected()){
                if(view.estadoSelecionado != null){
                    view.estadoSelecionado.setSelecionado(false);
                    view.estadoSelecionado = null;

                }
            }
        }
        repintar();

    }//GEN-LAST:event_scrollPaneImageMouseReleased

    private void scrollPaneImageComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_scrollPaneImageComponentResized

    }//GEN-LAST:event_scrollPaneImageComponentResized

    private void bttnCreateAutomatoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnCreateAutomatoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bttnCreateAutomatoActionPerformed

    private void itemMenuFinalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuFinalActionPerformed
        view.setFinal((Estado)view.entidadeSelecionada);
        repintar();
        view.entidadeSelecionada = null;
    }//GEN-LAST:event_itemMenuFinalActionPerformed

    private void itemMenuInicialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuInicialActionPerformed
        view.setInicial((Estado)view.entidadeSelecionada);
        repintar();
        view.entidadeSelecionada = null;
    }//GEN-LAST:event_itemMenuInicialActionPerformed

    private void itemMenuRemoverEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuRemoverEstadoActionPerformed
        view.removerEstado((Estado)view.entidadeSelecionada);
        repintar();
        view.entidadeSelecionada = null;
    }//GEN-LAST:event_itemMenuRemoverEstadoActionPerformed

    private void menuEstadoPopupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_menuEstadoPopupMenuCanceled
        view.entidadeSelecionada = null;
    }//GEN-LAST:event_menuEstadoPopupMenuCanceled

    private void itenMenuAddLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itenMenuAddLabelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_itenMenuAddLabelActionPerformed

    private void itemMenuCriarLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuCriarLabelActionPerformed
        LabelDialog label = new LabelDialog(null,true,"",this);
        label.toFront();
        label.setVisible(true);
    }//GEN-LAST:event_itemMenuCriarLabelActionPerformed

    private void menuSoltoPopupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_menuSoltoPopupMenuCanceled
        
    }//GEN-LAST:event_menuSoltoPopupMenuCanceled

    private void itemMenuEditarLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuEditarLabelActionPerformed
        LabelDialog label = new LabelDialog(null,true,view.labelSelecionada.getLabel(),this);
        label.toFront();
        label.setVisible(true);
    }//GEN-LAST:event_itemMenuEditarLabelActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(view.verificaEstados()){
            view.montarAutomato(automato);
            String cadeia = JOptionPane.showInputDialog(getParent(),"Insira a cadeia que irá ser reconhecida");
            if(cadeia == null)return;
            if(automato.verificar(cadeia)){
                JOptionPane.showMessageDialog(this.getParent(), "A cadeia foi aceita");
            }else{
                JOptionPane.showMessageDialog(getParent(), "A cadeia não foi aceita");
            }
            
        }else{
            JOptionPane.showMessageDialog(this.getParent(),"O autômato parece não estar completo.\n"
                    + "É necessário pelo menos 1 estado final e exatamente 1 estado inicial.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(view.verificaEstados()){
            view.montarAutomato(automato);
            String cadeia = JOptionPane.showInputDialog(getParent(),"Insira a cadeia que irá ser reconhecida");
            if(cadeia == null)return;
            if(automato.verificar(cadeia)){
                Stack<Integer> caminho = automato.getCaminho();
                String caminhoPercorrido = view.estados.get(caminho.elementAt(0)).getNome();
                for(int i = 1; i<caminho.size();i++){
                    caminhoPercorrido = caminhoPercorrido + " -> " + view.estados.get(caminho.elementAt(i)).getNome();
                }
                JOptionPane.showMessageDialog(this.getParent(), "A cadeia foi aceita, e o estados percorridos foram: " + caminhoPercorrido);
            
            }else{
                JOptionPane.showMessageDialog(getParent(), "A cadeia não foi aceita");
            }        
        }else{
            JOptionPane.showMessageDialog(this.getParent(),"O autômato parece não estar completo.\n"
                    + "É necessario pelo menos 1 estado final e exatamente 1 estado inicial.");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(view.verificaEstados()){
            view.montarAutomato(automato);
            MultiplasEntradas me = new MultiplasEntradas(pai, true, automato,false);
            me.setVisible(true);
            me.toFront();
        }else{
            JOptionPane.showMessageDialog(this.getParent(),"O autômato parece não estar completo.\n"
                    + "É necessario pelo menos 1 estado final e exatamente 1 estado inicial.");
        }
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton bttnApagar;
    private javax.swing.JToggleButton bttnCreateAutomato;
    private javax.swing.JToggleButton bttnCreateTransicao;
    private javax.swing.ButtonGroup bttnGroupMenu;
    private javax.swing.JToggleButton bttnPointer;
    private javax.swing.JMenuItem itemMenuCriarLabel;
    private javax.swing.JMenuItem itemMenuEditarLabel;
    private javax.swing.JMenuItem itemMenuFinal;
    private javax.swing.JMenuItem itemMenuInicial;
    private javax.swing.JMenuItem itemMenuRemoverEstado;
    private javax.swing.JMenuItem itenMenuAddLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JPopupMenu menuEstado;
    private javax.swing.JPopupMenu menuLabel;
    private javax.swing.JPopupMenu menuSolto;
    private javax.swing.JScrollPane scrollPaneImage;
    // End of variables declaration//GEN-END:variables

    public void addTransicao(String cond){
        if(cond.length() > 0){
            Estado s = view.getEstadoColidido(view.transSource.x,view.transSource.y);
            Estado t = view.getEstadoColidido(view.transTarget.x, view.transTarget.y);
            
            view.addTrans(s,t, cond);
            repintar();
            
        }
    }

    public void editarLabel(String text) {
        if(text == null)view.labelSelecionada = null;
        else{
            if(view.labelSelecionada != null){
                view.labelSelecionada.setLabel(text);
            }else{
                view.labels.add(new Label(this.x,this.y,text));
            }
        }
        repintar();
    }
    
     public class ViewPanel extends JPanel {

        private ArrayList<Estado> estados = new ArrayList<Estado>();
        private ArrayList<Transicao> trans = new ArrayList<>();
        private ArrayList<Label> labels = new ArrayList<>();
        private Entidade entidadeSelecionada = null;
        private Estado estadoSelecionado = null;
        private Label labelSelecionada = null;
        private Point transSource = new Point();
        private Point transTarget = new Point();
        private boolean creatingTrans = false;
        
        public ViewPanel() {
            super();
            this.setBackground(java.awt.Color.white);
            this.setLayout(new FlowLayout(FlowLayout.LEFT));
            this.setSize(800,600);
            this.setPreferredSize(this.getSize());
        }

        @Override
        public void paintComponent(java.awt.Graphics g) {
            super.paintComponent(g);

            java.awt.Graphics2D g2 = (java.awt.Graphics2D) g;
            ////configuração do rendering para obeter melhor qualidade
            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
            g2.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);
            g2.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING, RenderingHints.VALUE_COLOR_RENDER_QUALITY);
            g2.setRenderingHint(RenderingHints.KEY_DITHERING, RenderingHints.VALUE_DITHER_ENABLE);
            
            if (this.imageBuffer == null) {
                this.imageBuffer = new BufferedImage(this.getWidth(),
                        this.getHeight(), BufferedImage.TYPE_INT_RGB);

                java.awt.Graphics2D g2Buffer = this.imageBuffer.createGraphics();
                g2Buffer.setColor(this.getBackground());
                g2Buffer.fillRect(0, 0, (int)view.getPreferredSize().width, (int)view.getPreferredSize().height);

                g2Buffer.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

                this.draw(g2Buffer);
                g2Buffer.dispose();
            }

            if (this.imageBuffer != null) {
                g2.drawImage(this.imageBuffer, 0, 0, null);
            }
        }
        
        private BufferedImage imageBuffer;
        
        public void cleanImage() {
            this.imageBuffer = null;
        }
        
        private void draw(Graphics2D g) {
            g.setColor(Color.white);
            g.fillRect(0, 0, this.imageBuffer.getWidth(), this.imageBuffer.getHeight());
        
            for(Transicao t : trans){
                t.draw(g);
            }
            
            for(Estado e : estados){
                e.draw(g);
            }
            
            for(Label l : labels){
                l.draw(g);
            }
            
            if(creatingTrans == true){
                g.setColor(Color.black);
                g.drawLine(transSource.x, transSource.y, transTarget.x, transTarget.y);
            }
            
            
        }

        public void addTrans(Estado source, Estado target, String parametro){
            for(int i=trans.size()-1;i>=0;i--){
                Transicao t = trans.get(i);
                if(t.sameSourceTarget(source,target)){
                    t.addCondicao(parametro);
                    return;
                }
                if(t.opositeSourceTarget(source,target) && t.getTipo() == Transicao.TIPO_NORMAL){
                    trans.set(i, new TransicaoArco(t,Transicao.TIPO_CIMA));
                    trans.add(new TransicaoArco(source,target,parametro,Transicao.TIPO_BAIXO));
                    return;
                }
               
            }
            if(source != target)trans.add(new TransicaoReta(source,target,parametro));
            else trans.add(new TransicaoAuto(source,target,parametro));
        }
        
        public void removerEntidade(int x, int y){
            int retorno;
            for(int i= labels.size()-1;i>=0;i--){
                if(labels.get(i).colide(x,y)){
                    labels.remove(i);
                    return;
                }
            }
            for(int i = estados.size()-1; i>=0;i--){
                if(estados.get(i).colide(x, y)){
                    removeEstado(i);
                    return;
                }
            }
            for(int i=trans.size()-1;i>=0;i--){
                retorno = trans.get(i).colide(x, y);
                if(retorno == Transicao1.NAO_REMOVE)continue;
                if(retorno == Transicao1.REMOVE_TRANSICAO){
                    if(trans.get(i).getTipo() == Transicao1.TIPO_BAIXO || trans.get(i).getTipo() == Transicao1.TIPO_CIMA){
                        
                        for(int j=0;j<trans.size();j++){
                            Transicao t = trans.get(j);
                            if(t.opositeSourceTarget(trans.get(i).getSource(),trans.get(i).getTarget()))trans.set(j, new TransicaoReta(t));
                        }
                        
                    }
                    trans.remove(i);
                }
                return;
            }
        }
        
        public Estado getEstadoColidido(int x,int y){
            for(Estado e : view.estados){
                if(e.colide(x,y)){                 
                    return e;
                }
            }
            return null;
        }

        private void setInicial(Estado estadoSelecionado){
            for(Estado s : estados){
                s.setInicial(false);
            }
            estadoSelecionado.setInicial(true);
           
        }
        
        private void setFinal(Estado estadoSelecionado) {
            estadoSelecionado.setFinal(!estadoSelecionado.isFinal());
            
        }

        

        private void updatePosSelecionado(Point point,JScrollPane scroll) {
            Dimension dim = this.getPreferredSize();
            if(point.x + Estado.ray > this.getPreferredSize().width){
                dim.width += Estado.ray*2;
            }
            if(point.y + Estado.ray > this.getPreferredSize().height){
                dim.height += Estado.ray*2;
            }
            this.setPreferredSize(dim);
            entidadeSelecionada.updatePos(point.x, point.y);
        }

        private void removeEstado(int index) {
            Estado e = estados.get(index);
            for(int i = trans.size()-1;i>=0;i--){
                Transicao t = trans.get(i);
                if(t.isSource(e) || t.isTarget(e)){
                    trans.remove(t);
                }
            }
            estados.remove(index);
        }
        private void removerEstado(Estado estadoSelecionado) {
            estados.remove(estadoSelecionado);
            for(int i= trans.size()-1;i>=0;i--){
                Transicao t = trans.get(i);
                if(t.isSource(estadoSelecionado) || t.isTarget(estadoSelecionado)){
                    trans.remove(t);
                }
            }
        }

        private Label getLabelColidida(int x, int y) {
            for(Label l : labels){
                if(l.colide(x, y))return l;
            }
            return null;
        }

        private Entidade getEntidadeColidido(int x, int y) {
            for(int i=labels.size()-1;i>=0;i--){
                if(labels.get(i).colide(x,y))return labels.get(i);
            }
            for(int i=estados.size()-1;i>=0;i--){
                if(estados.get(i).colide(x,y))return estados.get(i);
            }
            return null;
        }

        private boolean verificaEstados() {
            boolean hasFinal,hasInicial;
            hasFinal = hasInicial = false;
            for(Estado e : estados){
                if(e.isFinal()){
                    hasFinal = true;
                }
                if(e.isInicial()){
                    if(hasInicial)return false;
                    hasInicial = true;
                }
            }
            if(hasInicial == true && hasFinal == true)return true;
            return false;
        }

        private void montarAutomato(AutomatoFinito automato) {
            automato.clear();
            ArrayList<Transicao> copia = (ArrayList<Transicao>) trans.clone();
            for(Estado e :estados){
                automato.addEstado(e.isFinal());
            }
            for(int i=0;i<estados.size();i++){
                Estado e = estados.get(i);
                
                for(int j=copia.size()-1;j>=0;j--){
                    Transicao t = copia.get(j);
                    if(t.isSource(e)){
                        automato.addTransicao(i, estados.indexOf(t.getTarget()) ,t.getCondicoes());
                        copia.remove(j);
                    }
                }
                if(e.isInicial())automato.setInicial(i);
            }
            
        }
    }


}
