/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Panels;

import Core.NaoTerminal;
import com.sun.j3d.utils.scenegraph.io.retained.J3fInputStream;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import lfa.Main;

/**
 *
 * @author mortz
 */
public class Gramatica extends javax.swing.JPanel {
    private int gridSize;
    private ArrayList<Derivacao> derivacoes;
    private Core.Gramatica gramatica;
    private Main pai;
    public Gramatica(Main pai) {
        this.setMaximumSize(this.getPreferredSize());
        initComponents();
        this.pai = pai;
        derivacoes = new ArrayList<>();
        Derivacao deriva = new Derivacao(this);
        
        GridLayout gl = new GridLayout(8,1);
        jPanel1.setLayout(gl);
        derivacoes.add(deriva);
        jPanel1.add(deriva);
        jScrollPane1.revalidate();
        jScrollPane1.repaint();
        gridSize = 8;
        gramatica = new Core.Gramatica();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 378, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 244, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(jPanel1);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton1.setText("Teste Rápido");
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton2.setText("Testar Múltiplas Entradas");
        jButton2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton3.setText("Converter para AF");
        jButton3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jLabel1.setText("* - Para Derivação que resulta em vazio basta deixar a string vazia.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(montarGramatica()){
            String input  = JOptionPane.showInputDialog(getParent(),"Insira a cadeia a ser verificada.");
            if(input == null)return;
            if(gramatica.verificar(input)){
                JOptionPane.showMessageDialog(getParent(),"A cadeia foi aceita");
            }else{
                JOptionPane.showMessageDialog(getParent(), "A cadeia não foi aceita");
            }
        }else{
            JOptionPane.showMessageDialog(getParent(), "A gramatica parece estar incorreta.\n"
                    + "É necessario possuir ao menos 1 derivação.\n"
                    + "As derivações podem ter no maximo 1 não terminal.\n"
                    + "É necessario possuir ao menos 1 derivação.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if(montarGramatica()){
            MultiplasEntradas me = new MultiplasEntradas(pai, true, gramatica,true,false);
            me.setVisible(true);
            me.toFront();
        }else{
            JOptionPane.showMessageDialog(getParent(), "A gramatica parece estar incorreta.\n"
                    + "É necessario possuir ao menos 1 derivação.\n"
                    + "As derivações podem ter no maximo 1 não terminal.\n"
                    + "É necessario possuir ao menos 1 derivação.");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        ConverterGR();
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    
    public void removerDerivacao(Derivacao filho) {
        if(derivacoes.size() > 1){
            derivacoes.remove(filho);
            jPanel1.remove(filho);
            jScrollPane1.revalidate();
            jScrollPane1.repaint();
            if(gridSize > 8)((GridLayout)jPanel1.getLayout()).setRows(--gridSize);
            
        }
    }

    public void criarDerivacao(Derivacao filho) {
        int index = derivacoes.indexOf(filho);
        if(index == derivacoes.size()-1){
            if(derivacoes.size() == gridSize){
                ((GridLayout)jPanel1.getLayout()).setRows(gridSize + 1);
                gridSize++;
            }   
            Derivacao deriva = new Derivacao(this);
            derivacoes.add(deriva);
            jPanel1.add(deriva);
            jScrollPane1.getVerticalScrollBar().setValue(jScrollPane1.getVerticalScrollBar().getMaximum()+50);
            jScrollPane1.revalidate();
            jScrollPane1.repaint();
        }
    
    }

    private boolean montarGramatica() {
        gramatica.clear();
        if(derivacoes.size() == 1)return false;
        for(int i=0;i<derivacoes.size()-1;i++){
            Derivacao d = derivacoes.get(i);
            if(d.validar()){
                gramatica.addDerivacao(d.getNaoTerminal(), d.getDerivacao());
            }else return false;         
        }
        return true;
    }

    private void ConverterGR() {
        if(!montarGramatica()){
            JOptionPane.showMessageDialog(getParent(), "A gramatica parece estar incorreta.\n"
                    + "É necessario possuir ao menos 1 derivação.\n"
                    + "As derivações podem ter no maximo 1 não terminal.\n"
                    + "É necessario possuir ao menos 1 derivação.");
            
        }else{
            Core.AutomatoFinito automato = gramatica.converterAF();
            pai.criarAutomato(automato);
        }
    }

    public void montarGramatica(Core.Gramatica gramatica) {
        if(gramatica.getNaoTerminais().size()>8){
            gridSize = gramatica.getNaoTerminais().size();
            ((GridLayout)jPanel1.getLayout()).setRows(gridSize);
        }
        for(NaoTerminal nt :gramatica.getNaoTerminais()){
            for(Core.Derivacao d : nt.getDerivacoes()){
                Derivacao deriva = new Derivacao(this);
                deriva.setDerivacao(nt.getNaoTerminal(),d.getDerivacao());
                derivacoes.add(deriva);
                jPanel1.add(deriva);
                
            }
        }
        jPanel1.remove(derivacoes.get(0));
        derivacoes.remove(0);
        criarDerivacao(derivacoes.get(derivacoes.size()-1));
        jScrollPane1.getVerticalScrollBar().setValue(jScrollPane1.getVerticalScrollBar().getMaximum()+50);
        jScrollPane1.revalidate();
        jScrollPane1.repaint();
    }
}
